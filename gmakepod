#!/usr/bin/make -f

s := podcasts.ini
j := 1

src := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
# for `generate.mk`
export mk.root := $(src)
mk := $(MAKE) --no-print-directory
jobs :=  -j$(j) -Oline

.PHONY: run
run: .download.mk
	$(mk) -f $< -k $(jobs)

.PHONY: .download.mk
.download.mk: .enclosures.new
	xargs $(mk) -f $(src)/generate.mk < $< > $@

.PHONY: .enclosures.new
.enclosures.new: .enclosures
ifdef f
	cp $< $@
else
	while read -r line; do \
	  url=`echo "$$line" | cut -d'!' -f2`; \
	  ([ -z `ruby $(src)/history.rb get "$$url"` ] && echo "$$line");:; \
	done < $< > $@
endif

.PHONY: .enclosures
.enclosures: .ini
	ruby $(src)/enclosures-print.rb < $< > $@

.PHONY: .ini
.ini:
	$(mk) -f $(src)/feed-parse.mk -k $(jobs) `ruby $(src)/ini-parse.rb "$(s)"` > $@


define help =
Options (the values are examples, not defaults):

s=file.ini
    a list of your subscriptions
e=10
    how many enclosures to download
j=4
    a number of parallel jobs for a downloading phase
f=1
    force to redownload already processed enclosures; useful w/ g=
g=ruby
    grab only enclosures matching subscriptions names in .ini
filter.type=audio
    by the enclosures 'type' attr
filter.url=mp3
    by the enclosure url; useful when the 'type' attr is missing
rsort=1
    grab enclosures starting from the bottom of the feed
e.curl='wget -q --show-progress $$1 -O $$@'
    can be used for memorizing enclosures urls w/o downloading them,
    like e.curl='echo 1'
e.curl.opt='-s'
    pass additional opts to curl (valid only if you do not modify `e.curl`)
t=1
    add a timestamp in the output name of each enclosure
endef

.PHONY: help
help:; $(info $(help))@:
